/* $OpenXM: OpenXM/src/asir99/lib/sturm,v 1.1.1.1 1999/11/10 08:12:31 noro Exp $ */
/* find intervals which include roots of a polynomial */

#include "defs.h"

def slice(P,XR,YR,WH) {
	X = FIRST(XR); XMIN = SECOND(XR); XMAX = THIRD(XR);
	Y = FIRST(YR); YMIN = SECOND(YR); YMAX = THIRD(YR);
	W = FIRST(WH); H = SECOND(WH);
	XS = (XMAX-XMIN)/W; YS = (YMAX-YMIN)/H;
	T = ptozp(subst(P,X,X*XS+XMIN,Y,Y*YS+YMIN));
	R = newvect(W+1);
	for ( I = 0; I <= W; I++ ) {
		S = sturm(subst(T,X,I));
		R[I] = numch(S,Y,0)-numch(S,Y,H);
	}
	return R;	
}

def slice1(P,XR,YR,WH) {
	X = FIRST(XR); XMIN = SECOND(XR); XMAX = THIRD(XR);
	Y = FIRST(YR); YMIN = SECOND(YR); YMAX = THIRD(YR);
	W = FIRST(WH); H = SECOND(WH);
	XS = (XMAX-XMIN)/W; YS = (YMAX-YMIN)/H;
	T = ptozp(subst(P,X,X*XS+XMIN,Y,Y*YS+YMIN));
	R = newvect(W+1);
	for ( I = 0; I <= W; I++ ) {
		S = sturm(subst(T,X,I));
		R[I] = newvect(H+1);
		seproot(S,Y,0,H,R[I]);
	}
	return R;	
}

def seproot(S,X,MI,MA,R) {
	N = car(size(S));
	for ( I = MI; I <= MA; I++ )
		if ( !(T = subst(S[0],X,I)) )
			R[I] = -1;
		else
			break;
	if ( I > MA )
		return;
	for ( J = MA; J >= MI; J-- )
		if ( !(T = subst(S[0],X,J)) )
			R[J] = -1;
		else
			break;
	R[I] = numch(S,X,I); R[J] = numch(S,X,J);
	if ( J <= I+1  )
		return;
	if ( R[I] == R[J] ) {
		for ( K = I + 1; K < J; K++ )
			R[K] = R[I];
		return;
	}
	T = idiv(I+J,2);
	seproot(S,X,I,T,R); 
	seproot(S,X,T,J,R);
}

/* compute the sturm sequence of P */

def sturm(P) {
	V = var(P); N = deg(P,V); T = newvect(N+1);
	G1 = T[0] = P; G2 = T[1] = ptozp(diff(P,var(P)));
	for ( I = 1, H = 1, X = 1; ; ) {
		if ( !deg(G2,V) )
			break;
		D = deg(G1,V)-deg(G2,V);
		if ( (L = LCOEF(G2)) < 0 )
			L = -L;
		if ( !(R = -srem(L^(D+1)*G1,G2)) )
			break;
		if ( type(R) == 1 ) {
			T[++I] = (R>0?1:-1); break;
		}
		M = H^D; G1 = G2; 
		G2 = T[++I] = sdiv(R,M*X); 
		if ( (X = LCOEF(G1)) < 0 )
			X = -X;
		H = X^D*H/M;
	}
	S = newvect(I+1);
	for ( J = 0; J <= I; J++ )
		S[J] = T[J];
	return S;
}

def numch(S,V,A) {
	N = car(size(S));
	for ( T = subst(S[0],V,A), I = 1, C = 0; I < N; I++ ) {
		T1 = subst(S[I],V,A);
		if ( !T1 )
			continue;
		if ( (T1 > 0 && T < 0) || (T1 < 0 && T > 0) )
			C++;
		T = T1;
	}
	return C;
}

def numch0(S,V,A,T) {
	N = car(size(S));
	for ( I = 1, C = 0; I < N; I++ ) {
		T1 = subst(S[I],V,A);
		if ( !T1 )
			continue;
		if ( (T1 > 0 && T < 0) || (T1 < 0 && T > 0) )
			C++;
		T = T1;
	}
	return C;
}
end;
