/* $OpenXM$ */
/* requires 'primdec' */

/* annihilating ideal of F^s ? */

def ann(F)
{
	V = vars(F);
	W = append([y1,y2,t],V);
	N = length(V);
	B = [1-y1*y2,t-y1*F];
	for ( I = N-1, DV = []; I >= 0; I-- )
		DV = cons(strtov("d"+rtostr(V[I])),DV);
	DW = append([dy1,dy2,dt],DV);
	for ( I = 0; I < N; I++ ) {
		B = cons(DV[I]+y1*diff(F,V[I])*dt,B);
	}
	ctrl("do_weyl",1);
	dp_nelim(2);
	G0 = dp_gr_main(B,append(W,DW),0,0,6);
	G1 = [];
	for ( T = G0; T != []; T = cdr(T) ) {
		E = car(T); VL = vars(E);
		if ( !member(y1,VL) && !member(y2,VL) )
			G1 = cons(E,G1);
	}
	G2 = map(subst,G1,dt,1);
	G3 = map(b_subst,G2,t);
	G4 = map(subst,G3,t,-1-s);
	ctrl("do_weyl",0);
	return G4;
}

/* b-function of F ? */

def bfct(F)
{
	G4 = ann(F);

	ctrl("do_weyl",1);
	V = vars(F);
	N = length(V);
	for ( I = N-1, DV = []; I >= 0; I-- )
		DV = cons(strtov("d"+rtostr(V[I])),DV);

	N1 = 2*(N+1);

	M = newmat(N1+1,N1);
	for ( J = N+1; J < N1; J++ )
		M[0][J] = 1;
	for ( J = 0; J < N+1; J++ )
		M[1][J] = 1;
#if 0
	for ( I = 0; I < N+1; I++ )
		M[I+2][N-I] = -1;	
	for ( I = 0; I < N; I++ )
		M[I+2+N+1][N1-1-I] = -1;	
#elif 1 
	for ( I = 0; I < N1-1; I++ )
		M[I+2][N1-I-1] = 1;
#else
	for ( I = 0; I < N1-1; I++ )
		M[I+2][I] = 1;
#endif
	V1 = cons(s,V); DV1 = cons(ds,DV);
	G5 = dp_gr_main(cons(F,G4),append(V1,DV1),0,0,M);
	for ( T = G5, G6 = []; T != []; T = cdr(T) ) {
		E = car(T);
		if ( intersection(vars(E),DV1) == [] )
			G6 = cons(E,G6);
	}
	ctrl("do_weyl",0);
	G6_0 = remove_zero(map(z_subst,G6,V));
	F0 = flatmf(cdr(fctr(dp_gr_main(G6_0,[s],0,0,0)[0])));
	for ( T = F0, BF = []; T != []; T = cdr(T) ) {
		FI = car(T);
		for ( J = 1; ; J++ ) {
			S = map(srem,map(z_subst,idealquo(G6,[FI^J],V1,0),V),FI);
			for ( ; S != [] && !car(S); S = cdr(S) );
			if ( S != [] )
				break;
		}
		BF = cons([FI,J],BF);
	}
	return BF;
}

def remove_zero(L)
{
	for ( R = []; L != []; L = cdr(L) )
		if ( car(L) )
			R = cons(car(L),R);
	return R;
}

def z_subst(F,V)
{
	for ( ; V != []; V = cdr(V) )
		F = subst(F,car(V),0);
	return F;
}

def flatmf(L) {  
    for ( S = []; L != []; L = cdr(L) )
		if ( type(F=car(car(L))) != NUM )
			S = append(S,[F]);
	return S;
}

def member(A,L) {
    for ( ; L != []; L = cdr(L) )
		if ( A == car(L) )
			return 1;
	return 0;
}   

def intersection(A,B)
{
	for ( L = []; A != []; A = cdr(A) )
	if ( member(car(A),B) )
		L = cons(car(A),L);
	return L;
}

def b_subst(F,V)
{
	D = deg(F,V);
	C = newvect(D+1);
	for ( I = D; I >= 0; I-- )
		C[I] = coef(F,I,V);
	for ( I = 0, R = 0; I <= D; I++ )
		if ( C[I] )
			R += C[I]*v_factorial(V,I);
	return R;
}

def v_factorial(V,N)
{
	for ( J = N-1, R = 1; J >= 0; J-- )
		R *= V-J;
	return R;
}
end$

