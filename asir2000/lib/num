/* $OpenXM: OpenXM/src/asir99/lib/num,v 1.1.1.1 1999/11/10 08:12:30 noro Exp $ */
/* factorial */

def f(N)
{
	for ( I = 1, M = 1; I <= N; I++ )
		M *= I;
	return M;
}

/* factorial by recursion */

def recf(X) { 
	if ( X == 0 )
		return ( 1 );
	else 
		return ( X * recf(X-1) );
}

/* Catalan's constant */

def cat(D) {
	tstart;
	for ( S = T = P = idiv(10^D,2), I = 1, J = 3; T; I++, J += 2 ) {
		P = idiv(P*I,J); T = idiv(T*I+P,J); S += T;
	}
	tstop;
	return S;
}

/* Napier's constant */

def e(D,N)
{
	for ( F = 1, S = 1, I = 1; I <= N; I++ ) {
		S = S*I + 1;
		F *= I;
	}
	T = red(S/F);
	return idiv(nm(T)*10^D,dn(T));
}

/* atan */

def at0(X,D)
{
	for ( S = T = idiv(D,X), I = 1, Y = X^2, Sgn = -1; 
		T; 
		I += 2, Sgn *= -1 ) {
		T = idiv(T*I,Y*(I+2)); S += (Sgn*T);
	}
	return S;
}

/* pi */

def pi(D)
{
	tstart; Y = 10^D; X = 16*at0(5,Y)-4*at0(239,Y); tstop;
	return X;
}

def at1(M,D) {
for (N = 1, SGN = 1, MM = M*M, A = 0, XN = idiv(D,M); 
	XN; 
	N += 2, XN = idiv(XN,MM), SGN *= -1)
		A += (SGN*idiv(XN,N));
	return A;
}

def pi1(D) {
	tstart; Y = 10^D; X = 16*at1(5,Y)-4*at1(239,Y); tstop; 
	return X;
}

def pi2(D) {
	tstart; Y = 10^D; 
	X = 48*at1(49,Y)+128*at1(57,Y)-20*at1(239,Y)+48*at1(110443,Y); 
	tstop; 
	return X;
}

/* Bernoulli number */
def bn(N)
{
	B = newvect(N+1); C = c2(N+1);
	for ( I = 1, B[0] = 1; I <= N; I++ ) {
		for ( D = C[I+1], J = 0, S = 0; J < I; J++ )
			S += D[J]*B[J];
		B[I] = red(-S/(I+1));
	}
	return [B,C];
}

def bp(N,B,C,V)
{
	for ( I = 0, S = 0; I <= N; I++ )
		S += C[I]*B[N-I]*V^I;
	return S;
}

/*
 * sum(N) = 1^N+2^N+...+n^N
 */

def sum(N)
{
	L = bn(N+1);
	R = car(L); C = car(cdr(L));
	S = bp(N+1,R,C[N+1],n);
	return red((subst(S,n,n+1)-subst(S,n,1))/(N+1));
}

/* nCi */

def c(N,I)
{
	for ( M = 1, J = 0; J < I; J++ )
		M *= N-J;
	return red(M/f(I));
}

def c1(N)
{
	A = newvect(N+1); B = newvect(N+1); A[0] = 1;
	for ( K = 1; K <= N; K++ ) {
		B[0] = B[K] = 1;
		for ( J = 1; J < K; J++ ) B[J] = A[J-1]+A[J];
		T = A; A = B; B = T;
	}
	return A;
}

def c2(N)
{
	A = newvect(N+1); A[0] = B = newvect(1); B[0] = 1;
	for ( K = 1; K <= N; K++ ) {
		A[K] = B = newvect(K+1); B[0] = B[K] = 1;
		for ( P = A[K-1], J = 1; J < K; J++ ) 
			B[J] = P[J-1]+P[J];
	}
	return A;
}

def sumd(N,M)
{
	for ( I = 1, S = 0; I <= M; I++ )
		S += I^N;
	return S;
}

#if 0
def sqrt(A,N) {
	for ( I = 0, X = 1, B = A; I < N; I++, B *= 100, X *= 10 ) {
		while ( 1 ) {
			T = idiv(idiv(B,X) + X,2);
/*
			if ((Y = T - X)== 0)
				if ( B == X^2) return (X/(10^I));
				else break;
			else if ( (Y == 1) || (Y == -1) ) break;
*/
			if ( ( (Y = T - X) == 0 ) || (Y == 1) || (Y == -1) ) break;
			X = T;
		}
	}
	return (X/(10^I));
}
#endif

def sqrt(A) {
	for ( J = 0, T = A; T >= 2^27; J++ ) {
		T = idiv(T,2^27)+1;
	}
	for ( I = 0; T >= 2; I++ ) {
		S = idiv(T,2);
		if ( T = S+S )
			T = S;
		else
			T = S+1;
	}
	X = (2^27)^idiv(J,2)*2^idiv(I,2);
	while ( 1 ) {
		if ( (Y=X^2) < A )
			X += X;
		else if ( Y == A )
			return X;
		else
			break;
	}
	while ( 1 )
		if ( (Y = X^2) <= A )
			return X;
		else
			X = idiv(A + Y,2*X);
}

/* internal -> hexadecimal */

def hex(N) {
	C = newvect(6,["a","b","c","d","e","f"]);
	for ( I = 0, T = 1; T < N; T *= 16, I++ );
	B = newvect(I+1);
	for ( I = 0; N >= 16; I++ ) {
		B[I] = irem(N,16);
		N = idiv(N,16);
	}
	B[I] = N;
	for ( ; I >= 0; I-- )
		if ( (T = B[I]) < 10 )
			print(T,0);
		else 
			print(C[B[I]-10],0);
	print("");
}

/* internal -> binary */

def bin(N) {
	for ( I = 0, T = 1; T < N; T *= 2, I++ );
	B = newvect(I+1);
	for ( I = 0; N >= 2; I++ ) {
		B[I] = irem(N,2);
		N = idiv(N,2);
	}
	B[I] = N;
	for ( ; I >= 0; I-- ) {
		if ( B[I] )
			print("1",0);
		else 
			print("0",0);
	}
	print("");
}
end$
