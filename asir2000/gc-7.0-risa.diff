%% $OpenXM: OpenXM_contrib2/asir2000/gc-7.0-risa.diff,v 1.1 2007/11/11 15:54:02 ohara Exp $
%% This patch is based on gc6.5-risa.diff.
diff -urN gc-7.0.orig/alloc.c gc-7.0/alloc.c
--- gc-7.0.orig/alloc.c	2007-06-22 11:40:30.000000000 +0900
+++ gc-7.0/alloc.c	2007-11-09 17:29:38.000000000 +0900
@@ -100,6 +100,7 @@
 GC_bool GC_dont_expand = 0;
 
 word GC_free_space_divisor = 3;
+word GC_free_space_numerator = 1;
 
 extern GC_bool GC_collection_in_progress();
 		/* Collection is in progress, or was abandoned.	*/
@@ -160,9 +161,9 @@
     scan_size = 2 * GC_composite_in_use + GC_atomic_in_use
 		+ total_root_size;
     if (TRUE_INCREMENTAL) {
-        return scan_size / (2 * GC_free_space_divisor);
+        return scan_size * GC_free_space_numerator / (2 * GC_free_space_divisor);
     } else {
-        return scan_size / GC_free_space_divisor;
+        return scan_size * GC_free_space_numerator / GC_free_space_divisor;
     }
 }
 
@@ -451,6 +452,7 @@
 #   if defined(REGISTER_LIBRARIES_EARLY)
         GC_cond_register_dynamic_libraries();
 #   endif
+	GC_timerstart();
     STOP_WORLD();
     IF_THREADS(GC_world_stopped = TRUE);
     if (GC_print_stats) {
@@ -479,6 +481,7 @@
 		    GC_deficit = i; /* Give the mutator a chance. */
                     IF_THREADS(GC_world_stopped = FALSE);
 	            START_WORLD();
+				GC_timerstop();
 	            return(FALSE);
 	    }
 	    if (GC_mark_some((ptr_t)(&dummy))) break;
@@ -503,6 +506,7 @@
     
     IF_THREADS(GC_world_stopped = FALSE);
     START_WORLD();
+    GC_timerstop();
     if (GC_print_stats) {
       GET_TIME(current_time);
       GC_log_printf("World-stopped marking took %lu msecs\n",
@@ -603,6 +607,7 @@
         /* FIXME: Add more checks.				*/
         GC_check_tls();
 #   endif
+	GC_timerstart();
 
     if (GC_print_stats)
       GET_TIME(start_time);
@@ -722,6 +727,7 @@
 	              MS_TIME_DIFF(finalize_time,start_time),
 	              MS_TIME_DIFF(done_time,finalize_time));
     }
+    GC_timerstop();
 }
 
 /* Externally callable routine to invoke full, stop-world collection */
@@ -908,6 +914,9 @@
         if (GC_collect_at_heapsize < GC_heapsize /* wrapped */)
          GC_collect_at_heapsize = (word)(-1);
 #     endif
+#if defined(VISUAL_LIB)
+    SendHeapSize();
+#endif
     return(TRUE);
 }
 
@@ -991,6 +1000,22 @@
     
     if (gran == 0) return(0);
 
+#if defined(_MSC_VER)
+    {
+#include <signal.h>
+        extern int recv_intr;
+        if ( recv_intr ) {
+            if ( recv_intr == 1 ) {
+                recv_intr = 0;
+                int_handler();
+            } else {
+                recv_intr = 0;
+                ox_usr1_handler(0);
+            }
+        }
+    }
+#endif
+
     while (*flh == 0) {
       ENTER_GC();
       /* Do our share of marking work */
diff -urN gc-7.0.orig/reclaim.c gc-7.0/reclaim.c
--- gc-7.0.orig/reclaim.c	2007-06-07 09:24:17.000000000 +0900
+++ gc-7.0/reclaim.c	2007-11-09 17:32:31.000000000 +0900
@@ -577,7 +577,7 @@
 	
     if (GC_print_stats == VERBOSE)
 	GET_TIME(start_time);
-    
+    GC_timerstart();    
     for (kind = 0; kind < GC_n_kinds; kind++) {
     	ok = &(GC_obj_kinds[kind]);
     	rlp = ok -> ok_reclaim_list;
@@ -599,6 +599,7 @@
             }
         }
     }
+    GC_timerstop();
     if (GC_print_stats == VERBOSE) {
 	GET_TIME(done_time);
 	GC_log_printf("Disposing of reclaim lists took %lu msecs\n",
diff -urN gc-7.1.orig/misc.c gc-7.1/misc.c
--- gc-7.1.orig/misc.c	2008-02-21 07:20:52.000000000 +0900
+++ gc-7.1/misc.c	2009-03-04 14:01:58.000000000 +0900
@@ -122,6 +122,93 @@
 long GC_large_alloc_warn_suppressed = 0;
 	/* Number of warnings suppressed so far.	*/
 
+#include <time.h>
+
+#if defined(_MSC_VER)
+#include <windows.h>
+
+static double get_clock()
+{
+	static int initialized = 0;
+	static int is_winnt = 0;
+	static HANDLE curproc;
+
+	if ( !initialized ) {
+		OSVERSIONINFO vinfo;
+
+		curproc = GetCurrentProcess();		
+		vinfo.dwOSVersionInfoSize = sizeof(vinfo);
+		GetVersionEx(&vinfo);
+		if ( vinfo.dwPlatformId == VER_PLATFORM_WIN32_NT )
+			is_winnt = 1;
+		else
+			is_winnt = 0;
+	}
+	if ( is_winnt ) {
+		FILETIME c,e,k,u;
+
+		GetProcessTimes(curproc,&c,&e,&k,&u);
+		return ((double)k.dwLowDateTime+(double)u.dwLowDateTime
+			+4294967296.0*((double)k.dwHighDateTime+(double)u.dwHighDateTime))/10000000.0;
+	} else
+//		return (double)clock()/(double)CLOCKS_PER_SEC;
+		return ((double)GetTickCount())/1000.0;
+}
+
+#elif defined(THINK_C) || defined(__MWERKS__) || defined(MSWIN32)
+
+static double get_clock()
+{
+	clock_t c;
+
+	c = clock();
+	return (double)c/(double)CLOCKS_PER_SEC;
+}
+
+#elif defined(_PA_RISC1_1) || defined(__svr4__) || defined(__CYGWIN__)
+
+#include <sys/time.h>
+#include <limits.h>
+
+static double get_clock()
+{
+	struct tms buf;
+
+	times(&buf);
+	return (double)(buf.tms_utime+buf.tms_stime)/(double)CLK_TCK;
+}
+
+#else
+
+#include <sys/time.h>
+#include <sys/resource.h>
+
+static double get_clock()
+{
+	int tv_sec,tv_usec;
+	struct rusage ru;
+
+	getrusage(RUSAGE_SELF,&ru);
+	tv_sec = ru.ru_utime.tv_sec + ru.ru_stime.tv_sec;
+	tv_usec = ru.ru_utime.tv_usec + ru.ru_stime.tv_usec;
+	return (double)tv_sec+(double)tv_usec/(double)1000000;
+}
+#endif
+
+static double gctime, gcstart;
+
+void GC_timerstart() {
+	gcstart = get_clock();
+}
+
+void GC_timerstop() {
+	gctime += get_clock() - gcstart;
+}
+
+double GC_get_gctime() {
+	return gctime;
+}
+
 /*ARGSUSED*/
 void * GC_default_oom_fn(size_t bytes_requested)
 {
