diff -ubBr gc-8.0.6.orig/Makefile.am gc-8.0.6/Makefile.am
--- gc-8.0.6.orig/Makefile.am	2021-09-29 05:47:22.000000000 +0900
+++ gc-8.0.6/Makefile.am	2021-10-02 14:42:45.103885000 +0900
@@ -54,21 +54,21 @@
 # C Library
 # ---------
 
-lib_LTLIBRARIES += libgc.la
+lib_LTLIBRARIES += libasir-gc.la
 
 if SINGLE_GC_OBJ
 
-libgc_la_SOURCES = extra/gc.c
+libasir-gc_la_SOURCES = extra/gc.c
 
 if PTHREAD_START_STANDALONE
 AM_CPPFLAGS += -DGC_PTHREAD_START_STANDALONE
-libgc_la_SOURCES += pthread_start.c
+libasir-gc_la_SOURCES += pthread_start.c
 endif
 
 else
 
 EXTRA_DIST += extra/gc.c
-libgc_la_SOURCES = \
+libasir-gc_la_SOURCES = \
     allchblk.c alloc.c blacklst.c dbg_mlc.c \
     dyn_load.c finalize.c gc_dlopen.c gcj_mlc.c headers.c \
     mach_dep.c malloc.c mallocx.c mark.c mark_rts.c misc.c new_hblk.c \
@@ -78,33 +78,33 @@
 # ---------------------------------
 
 if WIN32_THREADS
-libgc_la_SOURCES += win32_threads.c
+libasir-gc_la_SOURCES += win32_threads.c
 else
 if PTHREADS
 # Not Cygwin or MinGW.
-libgc_la_SOURCES += pthread_start.c pthread_support.c
+libasir-gc_la_SOURCES += pthread_start.c pthread_support.c
 if DARWIN_THREADS
-libgc_la_SOURCES += darwin_stop_world.c
+libasir-gc_la_SOURCES += darwin_stop_world.c
 else
-libgc_la_SOURCES += pthread_stop_world.c
+libasir-gc_la_SOURCES += pthread_stop_world.c
 endif
 endif
 endif
 
 if THREAD_LOCAL_ALLOC
-libgc_la_SOURCES += thread_local_alloc.c
+libasir-gc_la_SOURCES += thread_local_alloc.c
 endif
 
 if MAKE_BACK_GRAPH
-libgc_la_SOURCES += backgraph.c
+libasir-gc_la_SOURCES += backgraph.c
 endif
 
 if CHECKSUMS
-libgc_la_SOURCES += checksums.c
+libasir-gc_la_SOURCES += checksums.c
 endif
 
 if ENABLE_DISCLAIM
-libgc_la_SOURCES += fnlz_mlc.c
+libasir-gc_la_SOURCES += fnlz_mlc.c
 pkginclude_HEADERS += include/gc_disclaim.h
 endif
 
@@ -112,21 +112,21 @@
 endif
 
 if USE_INTERNAL_LIBATOMIC_OPS
-nodist_libgc_la_SOURCES = libatomic_ops/src/atomic_ops.c
+nodist_libasir-gc_la_SOURCES = libatomic_ops/src/atomic_ops.c
 endif
 
 if NEED_ATOMIC_OPS_ASM
-nodist_libgc_la_SOURCES = libatomic_ops/src/atomic_ops_sysdeps.S
+nodist_libasir-gc_la_SOURCES = libatomic_ops/src/atomic_ops_sysdeps.S
 endif
 
 # Include THREADDLLIBS here to ensure that the correct versions of
 # linuxthread semaphore functions get linked:
-libgc_la_LIBADD = @addobjs@ $(THREADDLLIBS) $(UNWINDLIBS) $(ATOMIC_OPS_LIBS)
-libgc_la_DEPENDENCIES = @addobjs@
-libgc_la_LDFLAGS = $(extra_ldflags_libgc) -version-info $(LIBGC_VER_INFO) \
+libasir-gc_la_LIBADD = @addobjs@ $(THREADDLLIBS) $(UNWINDLIBS) $(ATOMIC_OPS_LIBS)
+libasir-gc_la_DEPENDENCIES = @addobjs@
+libasir-gc_la_LDFLAGS = $(extra_ldflags_libgc) -version-info $(LIBGC_VER_INFO) \
     -no-undefined
 
-EXTRA_libgc_la_SOURCES = ia64_save_regs_in_stack.s sparc_mach_dep.S \
+EXTRA_libasir-gc_la_SOURCES = ia64_save_regs_in_stack.s sparc_mach_dep.S \
     sparc_netbsd_mach_dep.s sparc_sunos4_mach_dep.s
 
 if CPLUSPLUS
@@ -136,7 +136,7 @@
 pkginclude_HEADERS += include/gc_allocator.h include/gc_cpp.h
 include_HEADERS += include/extra/gc_cpp.h
 libgccpp_la_SOURCES = gc_cpp.cc
-libgccpp_la_LIBADD = ./libgc.la
+libgccpp_la_LIBADD = ./libasir-gc.la
 libgccpp_la_LDFLAGS = -version-info $(LIBGCCPP_VER_INFO) -no-undefined
 endif
 
@@ -157,7 +157,7 @@
 
 ## FIXME: relies on internal code generated by automake.
 ## FIXME: ./configure --enable-dependency-tracking should be used
-#all_objs = @addobjs@ $(libgc_la_OBJECTS)
+#all_objs = @addobjs@ $(libasir-gc_la_OBJECTS)
 #$(all_objs) : include/private/gcconfig.h include/private/gc_priv.h \
 #include/private/gc_hdrs.h include/gc.h include/gc_gcj.h \
 #include/gc_pthread_redirects.h include/gc_config_macros.h \
Only in gc-8.0.6: Makefile.am~
diff -ubBr gc-8.0.6.orig/Makefile.in gc-8.0.6/Makefile.in
--- gc-8.0.6.orig/Makefile.in	2021-09-29 05:48:20.000000000 +0900
+++ gc-8.0.6/Makefile.in	2021-10-02 14:41:01.025378000 +0900
@@ -158,9 +158,9 @@
 @CPLUSPLUS_TRUE@am__append_13 = libgccpp.la
 @CPLUSPLUS_TRUE@am__append_14 = include/gc_allocator.h include/gc_cpp.h
 @CPLUSPLUS_TRUE@am__append_15 = include/extra/gc_cpp.h
-@ENABLE_SHARED_TRUE@am__append_16 = $(top_builddir)/libgc.la
+@ENABLE_SHARED_TRUE@am__append_16 = $(top_builddir)/libasir-gc.la
 @THREADS_TRUE@am__append_17 = $(THREADDLLIBS)
-@ENABLE_SHARED_TRUE@am__append_18 = $(top_builddir)/libgc.la
+@ENABLE_SHARED_TRUE@am__append_18 = $(top_builddir)/libasir-gc.la
 @KEEP_BACK_PTRS_TRUE@am__append_19 = tracetest$(EXEEXT)
 @KEEP_BACK_PTRS_TRUE@am__append_20 = tracetest
 @THREADS_TRUE@am__append_21 = test_atomic_ops$(EXEEXT) \
@@ -172,7 +172,7 @@
 @THREADS_TRUE@	initsecondarythread_test
 @CPLUSPLUS_TRUE@am__append_23 = test_cpp$(EXEEXT)
 @CPLUSPLUS_TRUE@am__append_24 = test_cpp
-@AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@@ENABLE_SHARED_TRUE@am__append_25 = $(top_builddir)/libgc.la
+@AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@@ENABLE_SHARED_TRUE@am__append_25 = $(top_builddir)/libasir-gc.la
 @ENABLE_DISCLAIM_TRUE@am__append_26 = disclaim_test$(EXEEXT) \
 @ENABLE_DISCLAIM_TRUE@	disclaim_bench$(EXEEXT) \
 @ENABLE_DISCLAIM_TRUE@	disclaim_weakmap_test$(EXEEXT)
@@ -229,7 +229,7 @@
 	"$(DESTDIR)$(docdir)" "$(DESTDIR)$(pkgconfigdir)" \
 	"$(DESTDIR)$(includedir)" "$(DESTDIR)$(pkgincludedir)"
 LTLIBRARIES = $(lib_LTLIBRARIES)
-libcord_la_DEPENDENCIES = $(top_builddir)/libgc.la
+libcord_la_DEPENDENCIES = $(top_builddir)/libasir-gc.la
 am__dirstamp = $(am__leading_dot)dirstamp
 am_libcord_la_OBJECTS = cord/libcord_la-cordbscs.lo \
 	cord/libcord_la-cordprnt.lo cord/libcord_la-cordxtra.lo
@@ -242,7 +242,7 @@
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
 	$(libcord_la_LDFLAGS) $(LDFLAGS) -o $@
 am__DEPENDENCIES_1 =
-am__libgc_la_SOURCES_DIST = allchblk.c alloc.c blacklst.c dbg_mlc.c \
+am__libasir-gc_la_SOURCES_DIST = allchblk.c alloc.c blacklst.c dbg_mlc.c \
 	dyn_load.c finalize.c gc_dlopen.c gcj_mlc.c headers.c \
 	mach_dep.c malloc.c mallocx.c mark.c mark_rts.c misc.c \
 	new_hblk.c obj_map.c os_dep.c ptr_chck.c reclaim.c specific.c \
@@ -262,7 +262,7 @@
 @ENABLE_DISCLAIM_TRUE@@SINGLE_GC_OBJ_FALSE@am__objects_8 =  \
 @ENABLE_DISCLAIM_TRUE@@SINGLE_GC_OBJ_FALSE@	fnlz_mlc.lo
 @PTHREAD_START_STANDALONE_TRUE@@SINGLE_GC_OBJ_TRUE@am__objects_9 = pthread_start.lo
-@SINGLE_GC_OBJ_FALSE@am_libgc_la_OBJECTS = allchblk.lo alloc.lo \
+@SINGLE_GC_OBJ_FALSE@am_libasir-gc_la_OBJECTS = allchblk.lo alloc.lo \
 @SINGLE_GC_OBJ_FALSE@	blacklst.lo dbg_mlc.lo dyn_load.lo \
 @SINGLE_GC_OBJ_FALSE@	finalize.lo gc_dlopen.lo gcj_mlc.lo \
 @SINGLE_GC_OBJ_FALSE@	headers.lo mach_dep.lo malloc.lo \
@@ -274,18 +274,18 @@
 @SINGLE_GC_OBJ_FALSE@	$(am__objects_4) $(am__objects_5) \
 @SINGLE_GC_OBJ_FALSE@	$(am__objects_6) $(am__objects_7) \
 @SINGLE_GC_OBJ_FALSE@	$(am__objects_8)
-@SINGLE_GC_OBJ_TRUE@am_libgc_la_OBJECTS = extra/gc.lo $(am__objects_9) \
+@SINGLE_GC_OBJ_TRUE@am_libasir-gc_la_OBJECTS = extra/gc.lo $(am__objects_9) \
 @SINGLE_GC_OBJ_TRUE@	$(am__objects_1) $(am__objects_2) \
 @SINGLE_GC_OBJ_TRUE@	$(am__objects_3) $(am__objects_4) \
 @SINGLE_GC_OBJ_TRUE@	$(am__objects_5) $(am__objects_6) \
 @SINGLE_GC_OBJ_TRUE@	$(am__objects_7) $(am__objects_8)
-@NEED_ATOMIC_OPS_ASM_FALSE@@USE_INTERNAL_LIBATOMIC_OPS_TRUE@nodist_libgc_la_OBJECTS = libatomic_ops/src/atomic_ops.lo
-@NEED_ATOMIC_OPS_ASM_TRUE@nodist_libgc_la_OBJECTS = libatomic_ops/src/atomic_ops_sysdeps.lo
-libgc_la_OBJECTS = $(am_libgc_la_OBJECTS) $(nodist_libgc_la_OBJECTS)
-libgc_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
+@NEED_ATOMIC_OPS_ASM_FALSE@@USE_INTERNAL_LIBATOMIC_OPS_TRUE@nodist_libasir-gc_la_OBJECTS = libatomic_ops/src/atomic_ops.lo
+@NEED_ATOMIC_OPS_ASM_TRUE@nodist_libasir-gc_la_OBJECTS = libatomic_ops/src/atomic_ops_sysdeps.lo
+libasir-gc_la_OBJECTS = $(am_libasir-gc_la_OBJECTS) $(nodist_libasir-gc_la_OBJECTS)
+libasir-gc_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
-	$(libgc_la_LDFLAGS) $(LDFLAGS) -o $@
-@CPLUSPLUS_TRUE@libgccpp_la_DEPENDENCIES = ./libgc.la
+	$(libasir-gc_la_LDFLAGS) $(LDFLAGS) -o $@
+@CPLUSPLUS_TRUE@libgccpp_la_DEPENDENCIES = ./libasir-gc.la
 am__libgccpp_la_SOURCES_DIST = gc_cpp.cc
 @CPLUSPLUS_TRUE@am_libgccpp_la_OBJECTS = gc_cpp.lo
 libgccpp_la_OBJECTS = $(am_libgccpp_la_OBJECTS)
@@ -293,8 +293,8 @@
 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
 	$(CXXFLAGS) $(libgccpp_la_LDFLAGS) $(LDFLAGS) -o $@
 @CPLUSPLUS_TRUE@am_libgccpp_la_rpath = -rpath $(libdir)
-am__DEPENDENCIES_2 = $(nodist_libgc_la_OBJECTS) \
-	$(top_builddir)/libgc.la $(am__DEPENDENCIES_1)
+am__DEPENDENCIES_2 = $(nodist_libasir-gc_la_OBJECTS) \
+	$(top_builddir)/libasir-gc.la $(am__DEPENDENCIES_1)
 libstaticrootslib2_test_la_DEPENDENCIES = $(am__DEPENDENCIES_2)
 am_libstaticrootslib2_test_la_OBJECTS =  \
 	tests/libstaticrootslib2_test_la-staticrootslib.lo
@@ -375,7 +375,7 @@
 am_staticrootstest_OBJECTS =  \
 	tests/staticrootstest-staticrootstest.$(OBJEXT)
 staticrootstest_OBJECTS = $(am_staticrootstest_OBJECTS)
-staticrootstest_DEPENDENCIES = $(nodist_libgc_la_OBJECTS) \
+staticrootstest_DEPENDENCIES = $(nodist_libasir-gc_la_OBJECTS) \
 	$(am__DEPENDENCIES_1) libstaticrootslib_test.la \
 	libstaticrootslib2_test.la $(am__append_18)
 staticrootstest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
@@ -399,7 +399,7 @@
 test_cpp_OBJECTS = $(am_test_cpp_OBJECTS)
 @AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@test_cpp_DEPENDENCIES =  \
 @AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	libgccpp.la \
-@AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	$(nodist_libgc_la_OBJECTS) \
+@AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	$(nodist_libasir-gc_la_OBJECTS) \
 @AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	$(am__DEPENDENCIES_1) \
 @AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	$(am__DEPENDENCIES_1) \
 @AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	$(am__append_25)
@@ -494,8 +494,8 @@
 am__v_CCAS_ = $(am__v_CCAS_@AM_DEFAULT_V@)
 am__v_CCAS_0 = @echo "  CCAS    " $@;
 am__v_CCAS_1 = 
-SOURCES = $(libcord_la_SOURCES) $(libgc_la_SOURCES) \
-	$(EXTRA_libgc_la_SOURCES) $(nodist_libgc_la_SOURCES) \
+SOURCES = $(libcord_la_SOURCES) $(libasir-gc_la_SOURCES) \
+	$(EXTRA_libasir-gc_la_SOURCES) $(nodist_libasir-gc_la_SOURCES) \
 	$(libgccpp_la_SOURCES) $(libstaticrootslib2_test_la_SOURCES) \
 	$(libstaticrootslib_test_la_SOURCES) $(cordtest_SOURCES) \
 	$(disclaim_bench_SOURCES) $(disclaim_test_SOURCES) \
@@ -507,8 +507,8 @@
 	$(test_atomic_ops_SOURCES) $(test_cpp_SOURCES) \
 	$(threadkey_test_SOURCES) $(threadleaktest_SOURCES) \
 	$(tracetest_SOURCES)
-DIST_SOURCES = $(libcord_la_SOURCES) $(am__libgc_la_SOURCES_DIST) \
-	$(EXTRA_libgc_la_SOURCES) $(am__libgccpp_la_SOURCES_DIST) \
+DIST_SOURCES = $(libcord_la_SOURCES) $(am__libasir-gc_la_SOURCES_DIST) \
+	$(EXTRA_libasir-gc_la_SOURCES) $(am__libgccpp_la_SOURCES_DIST) \
 	$(libstaticrootslib2_test_la_SOURCES) \
 	$(libstaticrootslib_test_la_SOURCES) $(cordtest_SOURCES) \
 	$(am__disclaim_bench_SOURCES_DIST) \
@@ -1014,7 +1014,7 @@
 
 # C Library
 # ---------
-lib_LTLIBRARIES = libgc.la $(am__append_13) libcord.la
+lib_LTLIBRARIES = libasir-gc.la $(am__append_13) libcord.la
 
 # unprefixed header
 include_HEADERS = $(am__append_15) include/extra/gc.h
@@ -1050,7 +1050,7 @@
 	$(am__append_26)
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = bdw-gc.pc
-@SINGLE_GC_OBJ_FALSE@libgc_la_SOURCES = allchblk.c alloc.c blacklst.c \
+@SINGLE_GC_OBJ_FALSE@libasir-gc_la_SOURCES = allchblk.c alloc.c blacklst.c \
 @SINGLE_GC_OBJ_FALSE@	dbg_mlc.c dyn_load.c finalize.c \
 @SINGLE_GC_OBJ_FALSE@	gc_dlopen.c gcj_mlc.c headers.c \
 @SINGLE_GC_OBJ_FALSE@	mach_dep.c malloc.c mallocx.c mark.c \
@@ -1061,26 +1061,26 @@
 @SINGLE_GC_OBJ_FALSE@	$(am__append_7) $(am__append_8) \
 @SINGLE_GC_OBJ_FALSE@	$(am__append_9) $(am__append_10) \
 @SINGLE_GC_OBJ_FALSE@	$(am__append_11)
-@SINGLE_GC_OBJ_TRUE@libgc_la_SOURCES = extra/gc.c $(am__append_2) \
+@SINGLE_GC_OBJ_TRUE@libasir-gc_la_SOURCES = extra/gc.c $(am__append_2) \
 @SINGLE_GC_OBJ_TRUE@	$(am__append_4) $(am__append_5) \
 @SINGLE_GC_OBJ_TRUE@	$(am__append_6) $(am__append_7) \
 @SINGLE_GC_OBJ_TRUE@	$(am__append_8) $(am__append_9) \
 @SINGLE_GC_OBJ_TRUE@	$(am__append_10) $(am__append_11)
-@NEED_ATOMIC_OPS_ASM_TRUE@nodist_libgc_la_SOURCES = libatomic_ops/src/atomic_ops_sysdeps.S
-@USE_INTERNAL_LIBATOMIC_OPS_TRUE@nodist_libgc_la_SOURCES = libatomic_ops/src/atomic_ops.c
+@NEED_ATOMIC_OPS_ASM_TRUE@nodist_libasir-gc_la_SOURCES = libatomic_ops/src/atomic_ops_sysdeps.S
+@USE_INTERNAL_LIBATOMIC_OPS_TRUE@nodist_libasir-gc_la_SOURCES = libatomic_ops/src/atomic_ops.c
 
 # Include THREADDLLIBS here to ensure that the correct versions of
 # linuxthread semaphore functions get linked:
-libgc_la_LIBADD = @addobjs@ $(THREADDLLIBS) $(UNWINDLIBS) $(ATOMIC_OPS_LIBS)
-libgc_la_DEPENDENCIES = @addobjs@
-libgc_la_LDFLAGS = $(extra_ldflags_libgc) -version-info $(LIBGC_VER_INFO) \
+libasir-gc_la_LIBADD = @addobjs@ $(THREADDLLIBS) $(UNWINDLIBS) $(ATOMIC_OPS_LIBS)
+libasir-gc_la_DEPENDENCIES = @addobjs@
+libasir-gc_la_LDFLAGS = $(extra_ldflags_libgc) -version-info $(LIBGC_VER_INFO) \
     -no-undefined
 
-EXTRA_libgc_la_SOURCES = ia64_save_regs_in_stack.s sparc_mach_dep.S \
+EXTRA_libasir-gc_la_SOURCES = ia64_save_regs_in_stack.s sparc_mach_dep.S \
     sparc_netbsd_mach_dep.s sparc_sunos4_mach_dep.s
 
 @CPLUSPLUS_TRUE@libgccpp_la_SOURCES = gc_cpp.cc
-@CPLUSPLUS_TRUE@libgccpp_la_LIBADD = ./libgc.la
+@CPLUSPLUS_TRUE@libgccpp_la_LIBADD = ./libasir-gc.la
 @CPLUSPLUS_TRUE@libgccpp_la_LDFLAGS = -version-info $(LIBGCCPP_VER_INFO) -no-undefined
 
 # Misc
@@ -1088,7 +1088,7 @@
 AM_CXXFLAGS = @GC_CFLAGS@
 @ASM_WITH_CPP_UNSUPPORTED_FALSE@ASM_CPP_OPTIONS = -Wp,-P -x assembler-with-cpp
 
-#all_objs = @addobjs@ $(libgc_la_OBJECTS)
+#all_objs = @addobjs@ $(libasir-gc_la_OBJECTS)
 #$(all_objs) : include/private/gcconfig.h include/private/gc_priv.h \
 #include/private/gc_hdrs.h include/gc.h include/gc_gcj.h \
 #include/gc_pthread_redirects.h include/gc_config_macros.h \
@@ -1101,7 +1101,7 @@
 # These numbers should be updated at most once just before the release,
 # and, optionally, at most once during the development (after the release).
 LIBCORD_VER_INFO = 5:0:4
-libcord_la_LIBADD = $(top_builddir)/libgc.la
+libcord_la_LIBADD = $(top_builddir)/libasir-gc.la
 libcord_la_LDFLAGS = -version-info $(LIBCORD_VER_INFO) -no-undefined
 libcord_la_CPPFLAGS = $(AM_CPPFLAGS)
 libcord_la_SOURCES = \
@@ -1113,12 +1113,12 @@
 cordtest_LDADD = $(top_builddir)/libcord.la $(am__append_16)
 
 # Common libs to _LDADD for all tests.
-test_ldadd = $(nodist_libgc_la_OBJECTS) $(top_builddir)/libgc.la \
+test_ldadd = $(nodist_libasir-gc_la_OBJECTS) $(top_builddir)/libasir-gc.la \
             $(EXTRA_TEST_LIBS)
 
 gctest_SOURCES = tests/test.c
 gctest_LDADD = $(test_ldadd) $(am__append_17)
-gctest_DEPENDENCIES = $(top_builddir)/libgc.la
+gctest_DEPENDENCIES = $(top_builddir)/libasir-gc.la
 leaktest_SOURCES = tests/leak_test.c
 leaktest_LDADD = $(test_ldadd)
 middletest_SOURCES = tests/middle.c
@@ -1131,13 +1131,13 @@
 realloc_test_LDADD = $(test_ldadd)
 staticrootstest_SOURCES = tests/staticrootstest.c
 staticrootstest_CFLAGS = -DSTATICROOTSLIB2
-staticrootstest_LDADD = $(nodist_libgc_la_OBJECTS) $(EXTRA_TEST_LIBS) \
+staticrootstest_LDADD = $(nodist_libasir-gc_la_OBJECTS) $(EXTRA_TEST_LIBS) \
 	libstaticrootslib_test.la libstaticrootslib2_test.la \
 	$(am__append_18)
 libstaticrootslib_test_la_SOURCES = tests/staticrootslib.c
 libstaticrootslib_test_la_LIBADD = $(test_ldadd)
 libstaticrootslib_test_la_LDFLAGS = -no-undefined -rpath /nowhere
-libstaticrootslib_test_la_DEPENDENCIES = $(top_builddir)/libgc.la
+libstaticrootslib_test_la_DEPENDENCIES = $(top_builddir)/libasir-gc.la
 libstaticrootslib2_test_la_SOURCES = tests/staticrootslib.c
 libstaticrootslib2_test_la_LIBADD = $(test_ldadd)
 libstaticrootslib2_test_la_CFLAGS = -DSTATICROOTSLIB2
@@ -1157,7 +1157,7 @@
 @THREADS_TRUE@initsecondarythread_test_LDADD = $(test_ldadd) $(THREADDLLIBS)
 @CPLUSPLUS_TRUE@test_cpp_SOURCES = tests/test_cpp.cc
 @AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@test_cpp_LDADD = libgccpp.la \
-@AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	$(nodist_libgc_la_OBJECTS) \
+@AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	$(nodist_libasir-gc_la_OBJECTS) \
 @AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	$(EXTRA_TEST_LIBS) \
 @AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	$(CXXLIBS) \
 @AVOID_CPP_LIB_FALSE@@CPLUSPLUS_TRUE@	$(am__append_25)
@@ -1345,8 +1345,8 @@
 libatomic_ops/src/atomic_ops.lo: libatomic_ops/src/$(am__dirstamp) \
 	libatomic_ops/src/$(DEPDIR)/$(am__dirstamp)
 
-libgc.la: $(libgc_la_OBJECTS) $(libgc_la_DEPENDENCIES) $(EXTRA_libgc_la_DEPENDENCIES) 
-	$(AM_V_CCLD)$(libgc_la_LINK) -rpath $(libdir) $(libgc_la_OBJECTS) $(libgc_la_LIBADD) $(LIBS)
+libasir-gc.la: $(libasir-gc_la_OBJECTS) $(libasir-gc_la_DEPENDENCIES) $(EXTRA_libasir-gc_la_DEPENDENCIES) 
+	$(AM_V_CCLD)$(libasir-gc_la_LINK) -rpath $(libdir) $(libasir-gc_la_OBJECTS) $(libasir-gc_la_LIBADD) $(LIBS)
 
 libgccpp.la: $(libgccpp_la_OBJECTS) $(libgccpp_la_DEPENDENCIES) $(EXTRA_libgccpp_la_DEPENDENCIES) 
 	$(AM_V_CXXLD)$(libgccpp_la_LINK) $(am_libgccpp_la_rpath) $(libgccpp_la_OBJECTS) $(libgccpp_la_LIBADD) $(LIBS)
Only in gc-8.0.6: Makefile.in~
diff -ubBr gc-8.0.6.orig/NT_MAKEFILE gc-8.0.6/NT_MAKEFILE
--- gc-8.0.6.orig/NT_MAKEFILE	2021-09-29 05:47:22.000000000 +0900
+++ gc-8.0.6/NT_MAKEFILE	2021-10-02 14:36:15.420485000 +0900
@@ -23,6 +23,7 @@
 !ENDIF
 
 cflags = $(cflags) -c -DCRTAPI1=_cdecl -DCRTAPI2=_cdecl -GS -D_WINNT -W4
+cflags = $(cflags) -nologo -DLARGE_CONFIG
 !IF "$(CPU)" == "i386"
 cflags = $(cflags) -D_X86_=1  -DWIN32 -D_WIN32
 !ELSEIF "$(CPU)" == "AMD64"
diff -ubBr gc-8.0.6.orig/alloc.c gc-8.0.6/alloc.c
--- gc-8.0.6.orig/alloc.c	2021-09-29 05:47:22.000000000 +0900
+++ gc-8.0.6/alloc.c	2021-10-02 14:36:15.420827000 +0900
@@ -158,6 +158,7 @@
 #else
   word GC_free_space_divisor = 3;
 #endif
+word GC_free_space_numerator = 1;
 
 GC_INNER int GC_CALLBACK GC_never_stop_func(void)
 {
@@ -282,8 +283,8 @@
     total_root_size = 2 * stack_size + GC_root_size;
     scan_size = 2 * GC_composite_in_use + GC_atomic_in_use / 4
                 + total_root_size;
-    result = scan_size / GC_free_space_divisor;
-    if (GC_incremental) {
+    result = scan_size * GC_free_space_numerator / GC_free_space_divisor;
+    if (1 || GC_incremental) {
       result /= 2;
     }
     return result > min_bytes_allocd_minimum
@@ -1392,6 +1393,9 @@
     if (GC_on_heap_resize)
       (*GC_on_heap_resize)(GC_heapsize);
 
+#if defined(VISUAL)
+    SendHeapSize();
+#endif
     return(TRUE);
 }
 
@@ -1454,6 +1458,7 @@
     }
 
     blocks_to_get = (GC_heapsize - GC_heapsize_at_forced_unmap)
+                        * GC_free_space_numerator
                         / (HBLKSIZE * GC_free_space_divisor)
                     + needed_blocks;
     if (blocks_to_get > MAXHINCR) {
diff -ubBr gc-8.0.6.orig/configure gc-8.0.6/configure
--- gc-8.0.6.orig/configure	2021-09-29 05:48:19.000000000 +0900
+++ gc-8.0.6/configure	2021-10-02 14:36:15.427205000 +0900
@@ -16887,7 +16887,7 @@
 
 
 
-target_all=libgc.la
+target_all=libasir-gc.la
 
 
 TARGET_ECOS="no"
diff -ubBr gc-8.0.6.orig/configure.ac gc-8.0.6/configure.ac
--- gc-8.0.6.orig/configure.ac	2021-09-29 05:47:22.000000000 +0900
+++ gc-8.0.6/configure.ac	2021-10-02 14:36:15.430272000 +0900
@@ -465,7 +465,7 @@
 
 AC_SUBST(EXTRA_TEST_LIBS)
 
-target_all=libgc.la
+target_all=libasir-gc.la
 AC_SUBST(target_all)
 
 dnl If the target is an eCos system, use the appropriate eCos
diff -ubBr gc-8.0.6.orig/cord/cord.am gc-8.0.6/cord/cord.am
--- gc-8.0.6.orig/cord/cord.am	2021-09-29 05:47:22.000000000 +0900
+++ gc-8.0.6/cord/cord.am	2021-10-02 14:43:40.112061000 +0900
@@ -7,7 +7,7 @@
 
 lib_LTLIBRARIES += libcord.la
 
-libcord_la_LIBADD = $(top_builddir)/libgc.la
+libcord_la_LIBADD = $(top_builddir)/libasir-gc.la
 libcord_la_LDFLAGS = -version-info $(LIBCORD_VER_INFO) -no-undefined
 libcord_la_CPPFLAGS = $(AM_CPPFLAGS)
 
@@ -24,7 +24,7 @@
 ## In case of static libraries build, libgc.a is already referenced in
 ## dependency_libs attribute of libcord.la file.
 if ENABLE_SHARED
-cordtest_LDADD += $(top_builddir)/libgc.la
+cordtest_LDADD += $(top_builddir)/libasir-gc.la
 endif
 
 EXTRA_DIST += \
Only in gc-8.0.6/cord: cord.am~
diff -ubBr gc-8.0.6.orig/include/private/gcconfig.h gc-8.0.6/include/private/gcconfig.h
--- gc-8.0.6.orig/include/private/gcconfig.h	2021-09-29 05:47:22.000000000 +0900
+++ gc-8.0.6/include/private/gcconfig.h	2021-10-02 14:36:15.431830000 +0900
@@ -3226,6 +3226,7 @@
                              || defined(ARM32) \
                              || defined(AVR32) || defined(MIPS) \
                              || defined(NIOS2) || defined(OR1K))) \
+     || (defined(FREEBSD) && defined(__FreeBSD__) && __FreeBSD__ < 5) \
      || (defined(LINUX) && !defined(__gnu_linux__)) \
      || (defined(RTEMS) && defined(I386)) || defined(HOST_ANDROID)) \
     && !defined(NO_GETCONTEXT)
Only in gc-8.0.6: libatomic_ops
